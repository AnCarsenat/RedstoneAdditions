import os

class Mcfunction:
    def __init__(self, file_location):
        self.file_location = file_location
        self.file = open(file_location, "w", encoding="utf-8")
        self._write_header()

    def _write_header(self):
        header_lines = [
            "# Minecraft function file",
            "# This file was created by Reddition",
            "# Do not edit this file manually",
            "",
        ]
        for line in header_lines:
            self.write_line(line)

    def clear_file(self):
        self.file.seek(0)
        self.file.truncate()

    def close(self):
        self.file.close()

    def write_line(self, text):
        self.file.write(text + "\n")

    def write(self, text):
        self.file.write(text)


class BlockPlace:

    class FacingTypes:
        # New static members for direct access
        ALL = {0: "down", 1: "up", 2: "north", 3: "south", 4: "west", 5: "east"}
        HORIZONTAL = {1: "north"}
        WALL = {2: "north", 3: "south", 4: "west", 5: "east"}
        GATE = {2: "north", 3: "south", 4: "west", 5: "east"}
        LINK = {2: "east", 3: "west", 4: "north", 5: "south"}


    def __init__(self, block: str, facing_type: dict[int, str], block_tick:function=None):
        self.block_tick = block_tick
        self.block = block
        self.facing_type = facing_type

    def __str__(self):
        return f"BlockPlace({self.block}, {self.facing_type})"
       
class Item:
    def __init__(
        self,
        name,
        item_id: str,
        item_model: str,
        item_name: str,
        additional_item_data: str,
        entity_data: str,
        entity_tags: list[str],
        block_place: BlockPlace = None,
    ):
        self.name = name
        self.item_id = item_id
        self.item_model = item_model
        self.item_name = item_name
        self.entity_data = entity_data
        self.additional_item_data = additional_item_data
        self.entity_tags = entity_tags
        self.block_place = block_place

    def __str__(self):
        return f"{self.name}: {self.item_model}, {self.item_name}, {self.entity_data}"

    def generate_give_command(self):
        entity_data = {"id": self.entity_data["id"], "Tags": self.entity_tags}

        command_parts = [
            f"give @s {self.item_id}[",
            f'minecraft:item_model="{self.item_model}",',
            f"minecraft:item_name='{self.item_name}',",
            f"minecraft:custom_data={{'{self.name}':true}},",
        ]

        if self.additional_item_data:
            command_parts.append(self.additional_item_data + ",")

        command_parts.append(f"minecraft:entity_data={entity_data}")

        return "".join(command_parts) + "]"

    def generate_child_entities_selector(self):
        return f"@e[type={self.item_id},nbt={{Tags:{self.entity_tags}}}]"
    
    def generate_child_entities_selector_from_id(self,id,long=False):
        if long: return f"@e[type={id},nbt={{Tags:{self.entity_tags}}}]"
        return f"@e[type={id},tag={self.entity_tags[0]}]"

    def generate_is_holding_item(self):
        return f"execute if entity @s[nbt={{SelectedItem:{{components:{{'minecraft:custom_data':{{ {self.name}:true}}}}}}}}] run"

    def get_block_facing_values(self):
        if self.block_place:
            return self.block_place.facing_values
        return {}

    def get_block(self):
        if self.block_place:
            return self.block_place.block
        return None

# Constants for paths
REDDITION_ROOT = os.path.dirname(os.path.dirname(__file__))
DATA_DIR = os.path.join(REDDITION_ROOT, "data")

def setup_working_directory():
    working_directory = os.path.join(DATA_DIR, "reddition")
    os.makedirs(working_directory, exist_ok=True)
    return working_directory

def make_necessary_folder(file_path):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)